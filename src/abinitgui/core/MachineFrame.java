/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abinitgui.core;

import abinitgui.projects.Machine;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.WindowConstants;

/**
 *
 * @author yannick
 */
public class MachineFrame extends javax.swing.JFrame {

    private Machine currentMachine;
    
    /**
     * Creates new form MachineFrame
     */
    public MachineFrame(MainFrame mf) {
        initComponents();
        setLocationRelativeTo(mf);
        setLocation(768+50+15,0);
        setResizable(false);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
    }
    
    
    private void setStateConnect()
    {
        if(currentMachine != null && currentMachine.isConnected())
        {
            connectionToggleButton.setSelected(true);
            connectionToggleButton.setText("Disconnect");
        }
        else
        {
            connectionToggleButton.setSelected(false);
            connectionToggleButton.setText("Connect"); 
        }
    }
    
        private void stopConnection() {
        if(currentMachine != null)
        {
            currentMachine.stopConnection();
        }
        else
        {
            MainFrame.printERR("Please select a machine!");
        }
    }
        
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        machineLabel = new javax.swing.JLabel();
        machineCombo = new javax.swing.JComboBox();
        connectionToggleButton = new javax.swing.JToggleButton();
        SSH2ClientButton = new javax.swing.JButton();
        SFTPButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setFocusable(false);
        setFocusableWindowState(false);
        setType(java.awt.Window.Type.UTILITY);

        machineLabel.setText("Direct access to:");

        machineCombo.setModel(new DefaultComboBoxModel<Machine>());
        machineCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                machineComboItemStateChanged(evt);
            }
        });
        machineCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machineComboActionPerformed(evt);
            }
        });

        connectionToggleButton.setText("Connect");
        connectionToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionToggleButtonActionPerformed(evt);
            }
        });

        SSH2ClientButton.setText("SSH2 Client");
        SSH2ClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSH2ClientButtonActionPerformed(evt);
            }
        });

        SFTPButton.setText("SFTP Client");
        SFTPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SFTPButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(machineCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(machineLabel)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addComponent(connectionToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SSH2ClientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SFTPButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(machineLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(machineCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SSH2ClientButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SFTPButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void machineComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_machineComboItemStateChanged

    }//GEN-LAST:event_machineComboItemStateChanged

    private void machineComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machineComboActionPerformed
        Machine mach = (Machine)machineCombo.getSelectedItem();
        if(mach != null)
        {
            this.currentMachine = mach;
            setStateConnect();
        }
    }//GEN-LAST:event_machineComboActionPerformed

    private void connectionToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionToggleButtonActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                connectionToggleButton.setEnabled(false);
                if (connectionToggleButton.isSelected()) {
                    if(currentMachine != null)
                    {
                        currentMachine.connection();
                        setStateConnect();
                    }
                    else
                    {
                        MainFrame.printERR("Please select a machine first!");
                    }
                } else {
                    stopConnection();
                    setStateConnect();
                    //connectionToggleButton.setText("Connect");
                    MainFrame.printOUT("You are now disconnected!");
                }
                connectionToggleButton.setEnabled(true);
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_connectionToggleButtonActionPerformed

    private void SSH2ClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSH2ClientButtonActionPerformed
        Machine mach = (Machine)machineCombo.getSelectedItem();
        if(mach != null)
        {
            MySSHTerm ssh2 = mach.newSSHTerm();
        }
        else
        {
            MainFrame.printERR("Please select a machine first!");
        }
    }//GEN-LAST:event_SSH2ClientButtonActionPerformed

    private void SFTPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SFTPButtonActionPerformed
        if(currentMachine != null)
        {
            MySFTP client = currentMachine.newSFTP();
        }
        else
        {
            MainFrame.printERR("Please select a machine first!");
        }
    }//GEN-LAST:event_SFTPButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SFTPButton;
    private javax.swing.JButton SSH2ClientButton;
    private javax.swing.JToggleButton connectionToggleButton;
    private javax.swing.JComboBox machineCombo;
    private javax.swing.JLabel machineLabel;
    // End of variables declaration//GEN-END:variables

    public void setModel(DefaultComboBoxModel<Machine> model) {
        
        Machine mymach = (Machine)(machineCombo.getSelectedItem());
        machineCombo.setModel(model);
        machineCombo.setSelectedItem(mymach);
    }
}
