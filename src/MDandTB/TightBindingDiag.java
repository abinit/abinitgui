/*--
 TightBindingDiag.java - Created October 30, 2012

 Copyright (c) 2009-2013 Flavio Miguel ABREU ARAUJO.
 Université catholique de Louvain, Louvain-la-Neuve, Belgium
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions, and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions, and the disclaimer that follows
 these conditions in the documentation and/or other materials
 provided with the distribution.

 3. The names of the author may not be used to endorse or promote
 products derived from this software without specific prior written
 permission.

 In addition, we request (but do not require) that you include in the
 end-user documentation provided with the redistribution and/or in the
 software itself an acknowledgement equivalent to the following:
 "This product includes software developed by the
 Abinit Project (http://www.abinit.org/)."

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED.  IN NO EVENT SHALL THE JDOM AUTHORS OR THE PROJECT
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 For more information on the Abinit Project, please see
 <http://www.abinit.org/>.
 */

package MDandTB;

import abinitgui.MainFrame;
import abinitgui.RetMSG;
import abinitgui.Utils;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import javax.swing.JButton;
import javax.swing.JFileChooser;

public class TightBindingDiag extends javax.swing.JDialog {

    private MainFrame MF;
    private ClustepDiag CD;

    /**
     * Creates new form TightBindingDiag
     */
    public TightBindingDiag(java.awt.Frame parent, boolean modal, ClustepDiag cd) {
        super(parent, modal);
        initComponents();
        MF = (MainFrame) parent;
        CD = cd;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sendSIMDosknee12Button = new javax.swing.JButton();
        MTextField = new javax.swing.JTextField();
        MLabel = new javax.swing.JLabel();
        LTextField = new javax.swing.JTextField();
        LLabel = new javax.swing.JLabel();
        downloadR1 = new javax.swing.JButton();
        RB_LM = new javax.swing.JRadioButton();
        RB_notLM = new javax.swing.JRadioButton();
        jCheckBox_graphite = new javax.swing.JCheckBox();
        jCheckBox_pentahept = new javax.swing.JCheckBox();
        jRB_dos1 = new javax.swing.JRadioButton();
        jRB_dos2 = new javax.swing.JRadioButton();
        jPanel14 = new javax.swing.JPanel();
        sendSIMDosknee3Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        downloadR2 = new javax.swing.JButton();
        LLabel2 = new javax.swing.JLabel();
        LTextField2 = new javax.swing.JTextField();
        MLabel2 = new javax.swing.JLabel();
        MTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        openClustepInputFileLabel4 = new javax.swing.JLabel();
        displayClustepInputFileButton3 = new javax.swing.JButton();
        geditClustepInputButton3 = new javax.swing.JButton();
        openClustepInputFileDialogButton3 = new javax.swing.JButton();
        openTBbndstrInputFileTextField = new javax.swing.JTextField();
        jRB1 = new javax.swing.JRadioButton();
        jRB2 = new javax.swing.JRadioButton();
        jRB3 = new javax.swing.JRadioButton();
        sendSIMBNDSTRButton = new javax.swing.JButton();
        downloadR3 = new javax.swing.JButton();
        compileTBCheckBox = new javax.swing.JCheckBox();
        sendTBCheckBox = new javax.swing.JCheckBox();

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel4.setText("Density of states (DOS)");

        jPanel20.setBackground(new java.awt.Color(0, 153, 153));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setText("DOSKNEE");

        sendSIMDosknee12Button.setText("<HTML> <center> <b>Send the simulation</b><br> the simulation will start at server side </HTML>");
        sendSIMDosknee12Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSIMDosknee12ButtonActionPerformed(evt);
            }
        });

        MTextField.setText("3");

        MLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        MLabel.setText("M");

        LTextField.setText("3");

        LLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        LLabel.setText("L");

        downloadR1.setText("Download result");
        downloadR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadR1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(RB_LM);
        RB_LM.setSelected(true);
        RB_LM.setText("=>");
        RB_LM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_LMActionPerformed(evt);
            }
        });

        buttonGroup1.add(RB_notLM);
        RB_notLM.setText("=>");
        RB_notLM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_notLMActionPerformed(evt);
            }
        });

        buttonGroup2.add(jCheckBox_graphite);
        jCheckBox_graphite.setText("graphite");
        jCheckBox_graphite.setContentAreaFilled(false);
        jCheckBox_graphite.setEnabled(false);

        buttonGroup2.add(jCheckBox_pentahept);
        jCheckBox_pentahept.setText("pentahept");
        jCheckBox_pentahept.setEnabled(false);

        buttonGroup3.add(jRB_dos1);
        jRB_dos1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jRB_dos1.setSelected(true);
        jRB_dos1.setText("1");

        buttonGroup3.add(jRB_dos2);
        jRB_dos2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jRB_dos2.setText("2");

        org.jdesktop.layout.GroupLayout jPanel20Layout = new org.jdesktop.layout.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel20Layout.createSequentialGroup()
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel20Layout.createSequentialGroup()
                        .add(RB_LM)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(LLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(LTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(MLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(MTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel20Layout.createSequentialGroup()
                        .add(RB_notLM)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBox_graphite)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBox_pentahept))
                    .add(downloadR1))
                .add(18, 18, 18)
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel20Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jRB_dos1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jRB_dos2))
                    .add(sendSIMDosknee12Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel20Layout.createSequentialGroup()
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(RB_LM)
                    .add(LLabel)
                    .add(LTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MLabel)
                    .add(MTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(RB_notLM)
                    .add(jCheckBox_graphite)
                    .add(jCheckBox_pentahept))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(downloadR1))
            .add(jPanel20Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jRB_dos1)
                    .add(jRB_dos2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sendSIMDosknee12Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel14.setBackground(new java.awt.Color(0, 102, 204));

        sendSIMDosknee3Button.setText("<HTML> <center> <b>Send the simulation</b><br> the simulation will start at server side </HTML>");
        sendSIMDosknee3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSIMDosknee3ButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("DOSKNEE 3");

        downloadR2.setText("Download result");
        downloadR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadR2ActionPerformed(evt);
            }
        });

        LLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        LLabel2.setText("L");

        LTextField2.setText("3");

        MLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        MLabel2.setText("M");

        MTextField2.setText("3");

        org.jdesktop.layout.GroupLayout jPanel14Layout = new org.jdesktop.layout.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .add(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(LLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(LTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(MLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(MTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(downloadR2))
                .add(18, 18, 18)
                .add(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(sendSIMDosknee3Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .add(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(LLabel2)
                    .add(LTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MLabel2)
                    .add(MTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(downloadR2))
            .add(jPanel14Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sendSIMDosknee3Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("Band structure (BNDSTR)");

        jPanel7.setBackground(new java.awt.Color(153, 153, 255));

        openClustepInputFileLabel4.setText("Open the \"tbener\" input file");

        displayClustepInputFileButton3.setText("Display");
        displayClustepInputFileButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayClustepInputFileButton3ActionPerformed(evt);
            }
        });

        geditClustepInputButton3.setText("Edit");
        geditClustepInputButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geditClustepInputButton3ActionPerformed(evt);
            }
        });

        openClustepInputFileDialogButton3.setText("...");
        openClustepInputFileDialogButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openClustepInputFileDialogButton3ActionPerformed(evt);
            }
        });

        buttonGroup4.add(jRB1);
        jRB1.setSelected(true);
        jRB1.setText("6,6");

        buttonGroup4.add(jRB2);
        jRB2.setText("12,0");

        buttonGroup4.add(jRB3);
        jRB3.setText("11,0");

        sendSIMBNDSTRButton.setText("<HTML> <center> <b>Send the simulation</b><br> the simulation will start at server side </HTML>");
        sendSIMBNDSTRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSIMBNDSTRButtonActionPerformed(evt);
            }
        });

        downloadR3.setText("Download result");
        downloadR3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadR3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(openClustepInputFileDialogButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(openTBbndstrInputFileTextField))
            .add(jPanel7Layout.createSequentialGroup()
                .add(openClustepInputFileLabel4)
                .add(18, 18, 18)
                .add(displayClustepInputFileButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(geditClustepInputButton3)
                .add(44, 44, 44)
                .add(jRB1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRB2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRB3))
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(sendSIMBNDSTRButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(downloadR3))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(openClustepInputFileLabel4)
                    .add(displayClustepInputFileButton3)
                    .add(jRB1)
                    .add(jRB2)
                    .add(jRB3)
                    .add(geditClustepInputButton3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(openTBbndstrInputFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(openClustepInputFileDialogButton3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(sendSIMBNDSTRButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(downloadR3)))
        );

        compileTBCheckBox.setText("Compile");

        sendTBCheckBox.setText("Send data and source code");
        sendTBCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTBCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel4)
                    .add(jPanel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(sendTBCheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(compileTBCheckBox)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sendTBCheckBox)
                    .add(compileTBCheckBox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendTBCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTBCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendTBCheckBoxActionPerformed

    private void displayClustepInputFileButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayClustepInputFileButton3ActionPerformed
        MF.clustepInputFileDisplayer.setVisible(true);
        // TODO : pour quand ce sera éditable
        //clustepInputFileDisplayer.setEditable(true);

        String fileContent = "";

        try {
            File file = new File(openTBbndstrInputFileTextField.getText());

            FileInputStream fis = new FileInputStream(file);

            // Here BufferedInputStream is added for fast reading.
            BufferedInputStream bis = new BufferedInputStream(fis);
            DataInputStream dis = new DataInputStream(bis);

            while (dis.available() != 0) {
                fileContent += dis.readLine() + "\n";
            }

            // dispose all the resources after using them.
            fis.close();
            bis.close();
            dis.close();

        } catch (FileNotFoundException e) {
            MF.printERR(e.getMessage());
        } catch (IOException e) {
            MF.printERR(e.getMessage());
        }

        MF.clustepInputFileDisplayer.setText(fileContent);
    }//GEN-LAST:event_displayClustepInputFileButton3ActionPerformed

    private void geditClustepInputButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geditClustepInputButton3ActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                String fileName = openTBbndstrInputFileTextField.getText();

                // ****************************************************************************

                MF.editFile(fileName, false);
                // ****************************************************************************
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_geditClustepInputButton3ActionPerformed

    private void openClustepInputFileDialogButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openClustepInputFileDialogButton3ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        File currDir = new File(".");
        String currPath = currDir.getAbsolutePath();
        String basePath = basePath = currPath.replace("\\", "/").replace(".", "");
        MF.printDEB(basePath);
        fc.setMultiSelectionEnabled(false);

        int retValue = fc.showOpenDialog(this);
        if (retValue == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String relPath = file.getAbsolutePath().replace("\\", "/").replace(basePath, "./");
            openTBbndstrInputFileTextField.setText(relPath);
        }
    }//GEN-LAST:event_openClustepInputFileDialogButton3ActionPerformed

    private void sendSIMBNDSTRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSIMBNDSTRButtonActionPerformed
        JButton sendSIM = sendSIMBNDSTRButton;
        sendSIM.setEnabled(false);

        Runnable r = new Runnable() {
            @Override
            public void run() {
                JButton sendSIM = sendSIMBNDSTRButton;

                if (MF.localAbinitRadioButton().isSelected() && Utils.osName().startsWith("Windows")) {
                    MF.printERR("Please connect to a remote Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                MF.createFiletree();

                String rootPath = MF.mySimulationsTextField().getText();
                
                String TBfolderL = "Tight-Binding";

                String TBrootR = "./Tight-Binding_src/BS";
                String TBrootL = TBfolderL + "/BS";
                
                // ***************************************************************
                // Creation du dossier Tight-Binding local
                MF.mkdir(rootPath + "/" + TBfolderL);
                // Creation du dossier BS dans Tight-Binding local
                MF.mkdir(rootPath + "/" + TBrootL);
                // ***************************************************************

                String cwd = "";

                String CMD = "pwd";

                RetMSG retmsg;
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    if (MF.remoteExec != null) {
                        retmsg = MF.remoteExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    } else {
                        MF.printERR("First connect to an CLUSTEP host please !");
                    }
                } else if (MF.localAbinitRadioButton().isSelected()) {
                    if (MF.localExec != null) {
                        retmsg = MF.localExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    }
                } else { // Le choix n'a pas été fait
                    MF.printERR("Choose a destination option please at config. tab !");
                }

                // ***************************************************************

                String sep = Utils.fileSeparator();

                String inputFile = openTBbndstrInputFileTextField.getText();

                String inputFileName = Utils.getLastToken(inputFile.replace('\\', '/'), "/");

                // Test de l'existance de inputfile
                if (!Utils.exists(inputFile)) {
                    MF.printERR("The file " + inputFile + " doesn't exist !");
                    sendSIM.setEnabled(true);
                    return;
                }

                String simName = "BScalc";

                if (sendTBCheckBox.isSelected()) {

                    // Envoie du code source pour les calculs TB (remote ou local)
                    MF.putFile("./Tight-Binding_src.tar.gz ./Tight-Binding_src.tar.gz");

                    // Unzip the compressed file CLUSTEP_src.tar.gz
                    MF.sendCommand("tar -zxf ./Tight-Binding_src.tar.gz");

                    if (MF.remoteGatewayRadioButton().isSelected()
                            || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.sendCommand("rm -f ./Tight-Binding_src.tar.gz");
                    }
                }

                int compile;
                if (compileTBCheckBox.isSelected()) {
                    compile = 1;
                } else {
                    compile = 0;
                }

                int option = 1;
                if (jRB1.isSelected()) {
                    option = 1;
                }
                if (jRB2.isSelected()) {
                    option = 2;
                }
                if (jRB3.isSelected()) {
                    option = 3;
                }

                if (!inputFile.equals("")) {
                    int nbProc;
                    if (CD.abinitParaTextField().isEnabled()) { // Tjs actif pour cette version du gui
                        try {
                            nbProc = Integer.parseInt(CD.abinitParaTextField().getText());
                        } finally {
                            MF.printDEB("Please set up the number of processors to use ! nbProc was set to 1!");
                            nbProc = 1;
                        }
                    } else {
                        nbProc = 1;
                    }

                    if (CD.needSGECheckBox().isSelected()) {
                        int time, nodes, ram, hdm;
                        String email;
                        try {
                            time = Integer.parseInt(CD.timeTextField().getText());
                            nodes = Integer.parseInt(CD.nodesTextField().getText());
                            ram = Integer.parseInt(CD.ramTextField().getText());
                            hdm = Integer.parseInt(CD.hdmTextField().getText());
                            email = CD.emailTextField().getText();
                        } catch (Exception e) {
                            //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                            MF.printERR("The SGE script configurations are probably wrong !");
                            sendSIM.setEnabled(true);
                            return;
                        }
                        // Création du script SGE
                        try {
                            String PBSfileName = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                            OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(PBSfileName), MF.CharSet);
                            //FileWriter fw = new FileWriter(PBSfileName);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);

                            //*********************************************************************************************
                            String fileContent = "#!/bin/bash" + "\n"
                                    + "#" + "\n"
                                    + "# On old Green node" + "\n"
                                    + "#$ -l nb=false" + "\n"
                                    + "#" + "\n"
                                    + "# Ask for pe=parrallel environment, snode or openmpi" + "\n"
                                    + "# snode= same node, as the shared memory communication is the fastest" + "\n"
                                    + "#$ -pe openmpi 1" + "\n"
                                    + "# -pe snode8 8" + "\n"
                                    + "\n"
                                    + "# keep current working directory" + "\n"
                                    + "#$ -cwd" + "\n"
                                    + "\n"
                                    + "#$ -o SGE_out-$JOB_ID.log" + "\n"
                                    + "#$ -e SGE_err-$JOB_ID.log" + "\n"
                                    + "\n"
                                    + "# give a name to your job" + "\n"
                                    + "#$ -N " + simName + "\n"
                                    + "\n"
                                    + "# keep all the defined variables" + "\n"
                                    + "#$ -V" + "\n"
                                    + "#$ -l nb=false" + "\n"
                                    + "\n"
                                    + "# not mandatory: highmem=true (hm=true) for 32GB node" + "\n"
                                    + "# or hm=false for 16GB node" + "\n"
                                    + "# no hm argument does not take about the kind of node ram (16/32)" + "\n"
                                    + "# -l hm=true" + "\n"
                                    + "\n"
                                    + "# IMPORTANT: You need to specify the mem_free" + "\n"
                                    + "# h_vmem can also be set but mf is mandatory!" + "\n"
                                    + "# max 31G if hm=true and max 15G if hm=false" + "\n"
                                    + "#$ -l mf=" + ram + "M" + "\n"
                                    + "\n"
                                    + "# Specify the requested time" + "\n"
                                    + "#$ -l h_rt=" + time + ":00:00" + "\n"
                                    + "\n"
                                    + "# To be informed by email (besa= begin,end,stop,abort)" + "\n"
                                    + "#$ -M " + email + "\n"
                                    + "#$ -m besa" + "\n"
                                    //+ "# ---------------------------" + "\n"
                                    + "\n"
                                    + "echo \"Simulation " + simName + " is running!\"" + "\n"
                                    + "cd " + TBrootR + "\n"
                                    + "bash " + "execBS.sh" + " " + compile + " " + inputFileName + " " + option + " >& BS.log";

                            pw.print(fileContent);
                            //*********************************************************************************************

                            pw.println();
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                            MF.printERR("The SGE script could not be created !");
                            sendSIM.setEnabled(true);
                            return;
                        }
                    } else {
                        // Création du script BASH
                        try {
                            String BASHfileName = rootPath + "/" + TBrootL + "/" + simName + ".sh";

                            OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(BASHfileName), MF.CharSet);
                            //FileWriter fw = new FileWriter(BASHfileName);

                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.println("#!/bin/bash");
                            pw.println("echo \"Simulation " + simName + " is running!\"");
                            pw.println("cd " + TBrootR);
                            pw.print("bash " + "execBS.sh" + " " + compile + " " + inputFileName + " " + option + " >& BS.log");
                            pw.println();
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            //printDEB("Exception in sendSIMButtonActionPerformed:" + e + "");
                            MF.printERR("The bash script could not be created !");
                            sendSIM.setEnabled(true);
                            return;
                        }
                    }

                    // Envoie (copie) du fichier d'input *******************************************************************
                    String inputFileR = TBrootR + "/" + inputFileName;
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.dos2unix(new File(inputFile));
                        }
                    }
                    MF.putFile(inputFile + " " + inputFileR);

                    if (CD.needSGECheckBox().isSelected()) {
                        if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                            String sgeSHFile = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                            String sgeSHFileR = TBrootR + "/" + simName + ".SGE.sh";
                            if (Utils.osName().startsWith("Windows")) {
                                Utils.dos2unix(new File(sgeSHFile));
                            }
                            // Envoie du fichier SGE
                            MF.putFile(sgeSHFile + " " + sgeSHFileR);
                        }
                        // lancement des commandes d'exécution de la simulation
                        MF.sendCommand("qsub " + TBrootR + "/" + simName + ".SGE.sh");
                    } else {
                        String SHFile = rootPath + "/" + TBrootL + "/" + simName + ".sh";
                        String SHFileR = TBrootR + "/" + simName + ".sh";
                        if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                            if (Utils.osName().startsWith("Windows")) {
                                Utils.dos2unix(new File(SHFile));
                            }
                            // Envoie du fichier BASH
                            MF.putFile(SHFile + " " + SHFileR);
                        }
                        // lancement des commandes d'exécution de la simulation
                        MF.sendCommand("bash " + SHFileR);
                    }
                } else {
                    MF.printERR("Please setup the inputfile textfield !");
                    sendSIM.setEnabled(true);
                    return;
                }

                if (MF.localAbinitRadioButton().isSelected()) {
                    MF.printOUT("The simulation was submitted to the local Tight-Binding server.");
                } else {
                    MF.printOUT("The simulation was submitted to the remote Tight-Binding server " + MF.hostTextField().getText());
                    if (MF.remoteGatewayRadioButton().isSelected()) {
                        MF.printOUT(" via the gateway " + MF.gatewayHostTextField().getText() + ".");
                    } else {
                        //printOUT(".");
                    }
                }
                MF.printDEB("The submission thread ended successfully! (Tight-Binding)");
                sendSIM.setEnabled(true);
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_sendSIMBNDSTRButtonActionPerformed

    private void downloadR3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadR3ActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before doing anything!");
                    //getEvolutionFileButton.setEnabled(true);
                    downloadR3.setEnabled(true);
                    return;
                }
                
                String rootPath = MF.mySimulationsTextField().getText();

                String TBrootR = "./Tight-Binding_src/BS";
                String TBrootL = rootPath + "/Tight-Binding/BS";

                String LMParams = "6,6";

                if (jRB1.isSelected()) {
                    LMParams = "6,6";
                }
                if (jRB2.isSelected()) {
                    LMParams = "12,0";
                }
                if (jRB3.isSelected()) {
                    LMParams = "11,0";
                }

                String fileNameR = TBrootR + "/results/result-" + LMParams;
                String fileNameL = TBrootL + "/result-" + LMParams;

                if (!Utils.exists(fileNameL)) {
                    // Réception (copie) du fichier d'output si celui-ci est distant
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.getFile(fileNameR + " " + fileNameL);
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.unix2dos(new File(fileNameL));
                        }
                    }
                } else {
                    MF.printOUT("File " + fileNameL + " exists in your local filetree!\n"
                            + "Please remove the local file before you download the new file version!");
                }

                String logfileNameR = TBrootR + "/BS.log";
                String logfileNameL = TBrootL + "/BS.log";
                
                // Réception (copie) du fichier d'output si celui-ci est distant
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    MF.getFile(logfileNameR + " " + logfileNameL);
                    if (Utils.osName().startsWith("Windows")) {
                        Utils.unix2dos(new File(fileNameL));
                    }
                }
                
                // ****************************************************************************
                // Tester l'existance du fichier
                if (!Utils.exists(fileNameL)) {
                    MF.editFile(logfileNameL.replace("/./", "/"), false);
                } else {
                    MF.editFile(fileNameL.replace("/./", "/"), false);
                }
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_downloadR3ActionPerformed

    private void sendSIMDosknee12ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSIMDosknee12ButtonActionPerformed
        JButton sendSIM = sendSIMDosknee12Button;
        sendSIM.setEnabled(false);

        Runnable r = new Runnable() {
            @Override
            public void run() {
                JButton sendSIM = sendSIMDosknee12Button;

                if (MF.localAbinitRadioButton().isSelected() && Utils.osName().startsWith("Windows")) {
                    MF.printERR("Please connect to a remote Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                MF.createFiletree();
                
                String rootPath = MF.mySimulationsTextField().getText();
                
                String TBfolderL = "Tight-Binding";

                String TBrootR = "./Tight-Binding_src/DOS";
                String TBrootL = TBfolderL + "/DOS";
                
                // ***************************************************************
                // Creation du dossier Tight-Binding local
                MF.mkdir(rootPath + "/" + TBfolderL);
                // Creation du dossier DOS dans Tight-Binding local
                MF.mkdir(rootPath + "/" + TBrootL);
                // ***************************************************************

                String cwd = "";

                String CMD = "pwd";

                RetMSG retmsg;
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    if (MF.remoteExec != null) {
                        retmsg = MF.remoteExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    } else {
                        MF.printERR("First connect to an CLUSTEP host please !");
                    }
                } else if (MF.localAbinitRadioButton().isSelected()) {
                    if (MF.localExec != null) {
                        retmsg = MF.localExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    }
                } else { // Le choix n'a pas été fait
                    MF.printERR("Choose a destination option please at config. tab !");
                }

                // ***************************************************************

                //                String sep = Utils.fileSeparator();

                String simName = "DOScalc";

                if (sendTBCheckBox.isSelected()) {

                    // Envoie du code source pour les calculs TB (remote ou local)
                    MF.putFile("./Tight-Binding_src.tar.gz ./Tight-Binding_src.tar.gz");

                    // Unzip the compressed file CLUSTEP_src.tar.gz
                    MF.sendCommand("tar -zxf ./Tight-Binding_src.tar.gz");

                    if (MF.remoteGatewayRadioButton().isSelected()
                            || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.sendCommand("rm -f ./Tight-Binding_src.tar.gz");
                    }
                }

                int compile;
                if (compileTBCheckBox.isSelected()) {
                    compile = 1;
                } else {
                    compile = 0;
                }

                int option = 1;
                if (jRB_dos1.isSelected()) {
                    option = 1;
                }
                if (jRB_dos2.isSelected()) {
                    option = 2;
                }

                //**************

                int L = 3, M = 3;
                String L_str = "3";
                String M_str = "3";
                try {
                    if (RB_LM.isSelected()) {
                        L = Integer.parseInt(LTextField.getText());
                        M = Integer.parseInt(MTextField.getText());
                        L_str = "" + L;
                        M_str = "" + M;
                    }
                    if (RB_notLM.isSelected()) {
                        L_str = "-1";
                        if (jCheckBox_graphite.isSelected()) {
                            M_str = "graphite";
                        }
                        if (jCheckBox_pentahept.isSelected()) {
                            M_str = "pentahept";
                        }
                    }
                } catch (Exception e) {
                    MF.printDEB("L = 5, M = 5 (default taken!)");
                    L_str = "5";
                    M_str = "5";
                }

                //**************

                int nbProc;
                if (CD.abinitParaTextField().isEnabled()) { // Tjs actif pour cette version du gui
                    try {
                        nbProc = Integer.parseInt(CD.abinitParaTextField().getText());
                    } finally {
                        MF.printDEB("Please set up the number of processors to use ! nbProc was set to 1!");
                        nbProc = 1;
                    }
                } else {
                    nbProc = 1;
                }

                if (CD.needSGECheckBox().isSelected()) {
                    int time, nodes, ram, hdm;
                    String email;
                    try {
                        time = Integer.parseInt(CD.timeTextField().getText());
                        nodes = Integer.parseInt(CD.nodesTextField().getText());
                        ram = Integer.parseInt(CD.ramTextField().getText());
                        hdm = Integer.parseInt(CD.hdmTextField().getText());
                        email = CD.emailTextField().getText();
                    } catch (Exception e) {
                        //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The SGE script configuration is probably wrong !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                    // Création du script SGE
                    try {
                        String PBSfileName = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(PBSfileName), MF.CharSet);
                        //FileWriter fw = new FileWriter(PBSfileName);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);

                        //*********************************************************************************************
                        String fileContent = "#!/bin/bash" + "\n"
                                + "#" + "\n"
                                + "# On old Green node" + "\n"
                                + "#$ -l nb=false" + "\n"
                                + "#" + "\n"
                                + "# Ask for pe=parrallel environment, snode or openmpi" + "\n"
                                + "# snode= same node, as the shared memory communication is the fastest" + "\n"
                                + "#$ -pe openmpi 1" + "\n"
                                + "# -pe snode8 8" + "\n"
                                + "\n"
                                + "# keep current working directory" + "\n"
                                + "#$ -cwd" + "\n"
                                + "\n"
                                + "#$ -o SGE_out-$JOB_ID.log" + "\n"
                                + "#$ -e SGE_err-$JOB_ID.log" + "\n"
                                + "\n"
                                + "# give a name to your job" + "\n"
                                + "#$ -N " + simName + "\n"
                                + "\n"
                                + "# keep all the defined variables" + "\n"
                                + "#$ -V" + "\n"
                                + "#$ -l nb=false" + "\n"
                                + "\n"
                                + "# not mandatory: highmem=true (hm=true) for 32GB node" + "\n"
                                + "# or hm=false for 16GB node" + "\n"
                                + "# no hm argument does not take about the kind of node ram (16/32)" + "\n"
                                + "# -l hm=true" + "\n"
                                + "\n"
                                + "# IMPORTANT: You need to specify the mem_free" + "\n"
                                + "# h_vmem can also be set but mf is mandatory!" + "\n"
                                + "# max 31G if hm=true and max 15G if hm=false" + "\n"
                                + "#$ -l mf=" + ram + "M" + "\n"
                                + "\n"
                                + "# Specify the requested time" + "\n"
                                + "#$ -l h_rt=" + time + ":00:00" + "\n"
                                + "\n"
                                + "# To be informed by email (besa= begin,end,stop,abort)" + "\n"
                                + "#$ -M " + email + "\n"
                                + "#$ -m besa" + "\n"
                                //+ "# ---------------------------" + "\n"
                                + "\n"
                                + "echo \"Simulation " + simName + " is running!\"" + "\n"
                                + "cd " + TBrootR + "\n"
                                + "bash " + "execDOS.sh" + " " + compile + " " + L_str + " " + M_str + " " + option + " >& DOS.log";

                        pw.print(fileContent);
                        //*********************************************************************************************

                        pw.println();
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The SGE script could not be created !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                } else {
                    // Création du script BASH
                    try {
                        String BASHfileName = rootPath + "/" + TBrootL + "/" + simName + ".sh";
                        MF.printDEB("BASHfileName = "+BASHfileName);

                        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(BASHfileName), MF.CharSet);
                        //FileWriter fw = new FileWriter(BASHfileName);

                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.println("#!/bin/bash");
                        pw.println("echo \"Simulation " + simName + " is running!\"");
                        pw.println("cd " + TBrootR);
                        pw.print("bash " + "execDOS.sh" + " " + compile + " " + L_str + " " + M_str + " " + option + " >& DOS.log");
                        pw.println();
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        //printDEB("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The bash script could not be created !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                }

                if (CD.needSGECheckBox().isSelected()) {
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        String sgeSHFile = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                        String sgeSHFileR = TBrootR + "/" + simName + ".SGE.sh";
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.dos2unix(new File(sgeSHFile));
                        }
                        // Envoie du fichier SGE
                        MF.putFile(sgeSHFile + " " + sgeSHFileR);
                    }
                    // lancement des commandes d'exécution de la simulation
                    MF.sendCommand("qsub " + TBrootR + "/" + simName + ".SGE.sh");
                } else {
                    String SHFile = rootPath + "/" + TBrootL + "/" + simName + ".sh";
                    String SHFileR = TBrootR + "/" + simName + ".sh";
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.dos2unix(new File(SHFile));
                        }
                        // Envoie du fichier BASH
                        MF.putFile(SHFile + " " + SHFileR);
                    }
                    // lancement des commandes d'exécution de la simulation
                    MF.sendCommand("bash " + SHFileR);
                }

                if (MF.localAbinitRadioButton().isSelected()) {
                    MF.printOUT("The simulation was submitted to the local Tight-Binding server.");
                } else {
                    MF.printOUT("The simulation was submitted to the remote Tight-Binding server " + MF.hostTextField().getText());
                    if (MF.remoteGatewayRadioButton().isSelected()) {
                        MF.printOUT(" via the gateway " + MF.gatewayHostTextField().getText() + ".");
                    } else {
                        //printOUT(".");
                    }
                }
                MF.printDEB("The submission thread ended successfully! (Tight-Binding)");
                sendSIM.setEnabled(true);
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_sendSIMDosknee12ButtonActionPerformed

    private void downloadR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadR1ActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before doing anything!");
                    //getEvolutionFileButton.setEnabled(true);
                    downloadR1.setEnabled(true);
                    return;
                }

                String rootPath = MF.mySimulationsTextField().getText();

                String TBrootR = "./Tight-Binding_src/DOS";
                String TBrootL = rootPath + "/Tight-Binding/DOS";

                String DOS = "1";
                if (jRB_dos1.isSelected()) {
                    DOS = "1";
                }
                if (jRB_dos2.isSelected()) {
                    DOS = "2";
                }

                //**************

                int L = 3, M = 3;
                String LMParams = "3,3";
                try {
                    if (RB_LM.isSelected()) {
                        L = Integer.parseInt(LTextField.getText());
                        M = Integer.parseInt(MTextField.getText());
                        LMParams = L + "," + M;
                    }
                    if (RB_notLM.isSelected()) {
                        if (jCheckBox_graphite.isSelected()) {
                            LMParams = "graphite";
                        }
                        if (jCheckBox_pentahept.isSelected()) {
                            LMParams = "pentahept";
                        }
                    }
                } catch (Exception e) {
                    MF.printDEB("L = 3, M = 3 (default taken!)");
                    LMParams = "3,3";
                }

                String fileNameR = TBrootR + "/results/DOS" + DOS + "_res-" + LMParams;
                String fileNameL = TBrootL + "/DOS" + DOS + "_res-" + LMParams;

                if (!Utils.exists(fileNameL)) {
                    // Réception (copie) du fichier d'output si celui-ci est distant
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.getFile(fileNameR + " " + fileNameL);
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.unix2dos(new File(fileNameL));
                        }
                    }
                } else {
                    MF.printOUT("File " + fileNameL + " exists in your local filetree!\n"
                            + "Please remove the local file before you download the new file version!");
                }

                String logfileNameR = TBrootR + "/DOS.log";
                String logfileNameL = TBrootL + "/DOS.log";

                // Réception (copie) du fichier d'output si celui-ci est distant
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    MF.getFile(logfileNameR + " " + logfileNameL);
                    if (Utils.osName().startsWith("Windows")) {
                        Utils.unix2dos(new File(fileNameL));
                    }
                }

                // ****************************************************************************
                // Tester l'existance du fichier
                if (!Utils.exists(fileNameL)) {
                    MF.editFile(logfileNameL.replace("/./", "/"), false);
                } else {
                    MF.editFile(fileNameL.replace("/./", "/"), false);
                }
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_downloadR1ActionPerformed

    private void RB_LMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_LMActionPerformed
        LLabel.setEnabled(true);
        MLabel.setEnabled(true);
        LTextField.setEnabled(true);
        MTextField.setEnabled(true);

        jCheckBox_graphite.setEnabled(false);
        jCheckBox_pentahept.setEnabled(false);
        jCheckBox_graphite.setSelected(false);
        jCheckBox_pentahept.setSelected(false);
    }//GEN-LAST:event_RB_LMActionPerformed

    private void RB_notLMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_notLMActionPerformed
        LLabel.setEnabled(false);
        MLabel.setEnabled(false);
        LTextField.setEnabled(false);
        MTextField.setEnabled(false);

        jCheckBox_graphite.setEnabled(true);
        jCheckBox_pentahept.setEnabled(true);
        jCheckBox_graphite.setSelected(true);
        jCheckBox_pentahept.setSelected(false);
    }//GEN-LAST:event_RB_notLMActionPerformed

    private void sendSIMDosknee3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSIMDosknee3ButtonActionPerformed
        JButton sendSIM = sendSIMDosknee3Button;
        sendSIM.setEnabled(false);

        Runnable r = new Runnable() {
            @Override
            public void run() {
                JButton sendSIM = sendSIMDosknee3Button;

                if (MF.localAbinitRadioButton().isSelected() && Utils.osName().startsWith("Windows")) {
                    MF.printERR("Please connect to a remote Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before submitting a simulation !");
                    sendSIM.setEnabled(true);
                    return;
                }

                MF.createFiletree();

                String rootPath = MF.mySimulationsTextField().getText();
                
                String TBfolderL = "Tight-Binding";

                String TBrootR = "./Tight-Binding_src/DOS";
                String TBrootL = TBfolderL + "/DOS";
                
                // ***************************************************************
                // Creation du dossier Tight-Binding local
                MF.mkdir(rootPath + "/" + TBfolderL);
                // Creation du dossier DOS dans Tight-Binding local
                MF.mkdir(rootPath + "/" + TBrootL);
                // ***************************************************************

                String cwd = "";

                String CMD = "pwd";

                RetMSG retmsg;
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    if (MF.remoteExec != null) {
                        retmsg = MF.remoteExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    } else {
                        MF.printERR("First connect to an CLUSTEP host please !");
                    }
                } else if (MF.localAbinitRadioButton().isSelected()) {
                    if (MF.localExec != null) {
                        retmsg = MF.localExec.sendCommand(CMD);
                        if (retmsg.getRetCode() == RetMSG.SUCCES) {
                            MF.printOUT("PWD: " + retmsg.getRetMSG());
                            cwd = MF.removeEndl(retmsg.getRetMSG());
                        } else {
                            //printERR("Error (RetVal = " + retmsg.getRetCode() + "): " + retmsg.getRetMSG());
                            MF.printERR("Error: " + retmsg.getRetMSG() + " !");
                        }
                    }
                } else { // Le choix n'a pas été fait
                    MF.printERR("Choose a destination option please at config. tab !");
                }

                // ***************************************************************

                //                String sep = Utils.fileSeparator();

                String simName = "DOScalc";

                if (sendTBCheckBox.isSelected()) {

                    // Envoie du code source pour les calculs TB (remote ou local)
                    MF.putFile("./Tight-Binding_src.tar.gz ./Tight-Binding_src.tar.gz");

                    // Unzip the compressed file CLUSTEP_src.tar.gz
                    MF.sendCommand("tar -zxf ./Tight-Binding_src.tar.gz");

                    if (MF.remoteGatewayRadioButton().isSelected()
                            || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.sendCommand("rm -f ./Tight-Binding_src.tar.gz");
                    }
                }

                int compile;
                if (compileTBCheckBox.isSelected()) {
                    compile = 1;
                } else {
                    compile = 0;
                }

                //**************

                int L = 3, M = 3;
                String L_str = "3";
                String M_str = "3";
                try {
                    L = Integer.parseInt(LTextField2.getText());
                    M = Integer.parseInt(MTextField2.getText());
                    L_str = "" + L;
                    M_str = "" + M;
                } catch (Exception e) {
                    MF.printDEB("L = 5, M = 5 (default taken!)");
                    L_str = "5";
                    M_str = "5";
                }

                //**************

                int nbProc;
                if (CD.abinitParaTextField().isEnabled()) { // Tjs actif pour cette version du gui
                    try {
                        nbProc = Integer.parseInt(CD.abinitParaTextField().getText());
                    } finally {
                        MF.printDEB("Please set up the number of processors to use ! nbProc was set to 1!");
                        nbProc = 1;
                    }
                } else {
                    nbProc = 1;
                }

                if (CD.needSGECheckBox().isSelected()) {
                    int time, nodes, ram, hdm;
                    String email;
                    try {
                        time = Integer.parseInt(CD.timeTextField().getText());
                        nodes = Integer.parseInt(CD.nodesTextField().getText());
                        ram = Integer.parseInt(CD.ramTextField().getText());
                        hdm = Integer.parseInt(CD.hdmTextField().getText());
                        email = CD.emailTextField().getText();
                    } catch (Exception e) {
                        //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The SGE script configurations are probably wrong !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                    // Création du script SGE
                    try {
                        String PBSfileName = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(PBSfileName), MF.CharSet);
                        //FileWriter fw = new FileWriter(PBSfileName);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);

                        //*********************************************************************************************
                        String fileContent = "#!/bin/bash" + "\n"
                                + "#" + "\n"
                                + "# On old Green node" + "\n"
                                + "#$ -l nb=false" + "\n"
                                + "#" + "\n"
                                + "# Ask for pe=parrallel environment, snode or openmpi" + "\n"
                                + "# snode= same node, as the shared memory communication is the fastest" + "\n"
                                + "#$ -pe openmpi 1" + "\n"
                                + "# -pe snode8 8" + "\n"
                                + "\n"
                                + "# keep current working directory" + "\n"
                                + "#$ -cwd" + "\n"
                                + "\n"
                                + "#$ -o SGE_out-$JOB_ID.log" + "\n"
                                + "#$ -e SGE_err-$JOB_ID.log" + "\n"
                                + "\n"
                                + "# give a name to your job" + "\n"
                                + "#$ -N " + simName + "\n"
                                + "\n"
                                + "# keep all the defined variables" + "\n"
                                + "#$ -V" + "\n"
                                + "#$ -l nb=false" + "\n"
                                + "\n"
                                + "# not mandatory: highmem=true (hm=true) for 32GB node" + "\n"
                                + "# or hm=false for 16GB node" + "\n"
                                + "# no hm argument does not take about the kind of node ram (16/32)" + "\n"
                                + "# -l hm=true" + "\n"
                                + "\n"
                                + "# IMPORTANT: You need to specify the mem_free" + "\n"
                                + "# h_vmem can also be set but mf is mandatory!" + "\n"
                                + "# max 31G if hm=true and max 15G if hm=false" + "\n"
                                + "#$ -l mf=" + ram + "M" + "\n"
                                + "\n"
                                + "# Specify the requested time" + "\n"
                                + "#$ -l h_rt=" + time + ":00:00" + "\n"
                                + "\n"
                                + "# To be informed by email (besa= begin,end,stop,abort)" + "\n"
                                + "#$ -M " + email + "\n"
                                + "#$ -m besa" + "\n"
                                //+ "# ---------------------------" + "\n"
                                + "\n"
                                + "echo \"Simulation " + simName + " is running!\"" + "\n"
                                + "cd " + TBrootR + "\n"
                                + "bash " + "execDOS.sh" + " " + compile + " " + L_str + " " + M_str + " 3 >& DOS.log";

                        pw.print(fileContent);
                        //*********************************************************************************************

                        pw.println();
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        //printERR("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The SGE script could not be created !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                } else {
                    // Création du script BASH
                    try {
                        String BASHfileName = rootPath + "/" + TBrootL + "/" + simName + ".sh";

                        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(BASHfileName), MF.CharSet);
                        //FileWriter fw = new FileWriter(BASHfileName);

                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.println("#!/bin/bash");
                        pw.println("echo \"Simulation " + simName + " is running!\"");
                        pw.println("cd " + TBrootR);
                        pw.print("bash " + "execDOS.sh" + " " + compile + " " + L_str + " " + M_str + " 3 >& DOS.log");
                        pw.println();
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        //printDEB("Exception in sendSIMButtonActionPerformed:" + e + "");
                        MF.printERR("The bash script could not be created !");
                        sendSIM.setEnabled(true);
                        return;
                    }
                }

                if (CD.needSGECheckBox().isSelected()) {
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        String sgeSHFile = rootPath + "/" + TBrootL + "/" + simName + ".SGE.sh";
                        String sgeSHFileR = TBrootR + "/" + simName + ".SGE.sh";
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.dos2unix(new File(sgeSHFile));
                        }
                        // Envoie du fichier SGE
                        MF.putFile(sgeSHFile + " " + sgeSHFileR);
                    }
                    // lancement des commandes d'exécution de la simulation
                    MF.sendCommand("qsub " + TBrootR + "/" + simName + ".SGE.sh");
                } else {
                    String SHFile = rootPath + "/" + TBrootL + "/" + simName + ".sh";
                    String SHFileR = TBrootR + "/" + simName + ".sh";
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.dos2unix(new File(SHFile));
                        }
                        // Envoie du fichier BASH
                        MF.putFile(SHFile + " " + SHFileR);
                    }
                    // lancement des commandes d'exécution de la simulation
                    MF.sendCommand("bash " + SHFileR);
                }

                if (MF.localAbinitRadioButton().isSelected()) {
                    MF.printOUT("The simulation was submitted to the local Tight-Binding server.");
                } else {
                    MF.printOUT("The simulation was submitted to the remote Tight-Binding server " + MF.hostTextField().getText());
                    if (MF.remoteGatewayRadioButton().isSelected()) {
                        MF.printOUT(" via the gateway " + MF.gatewayHostTextField().getText() + ".");
                    } else {
                        //printOUT(".");
                    }
                }
                MF.printDEB("The submission thread ended successfully! (Tight-Binding)");
                sendSIM.setEnabled(true);
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_sendSIMDosknee3ButtonActionPerformed

    private void downloadR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadR2ActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                if ((MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) && MF.remoteExec == null) {
                    MF.printERR("Please connect to a Tight-Binding host before doing anything!");
                    //getEvolutionFileButton.setEnabled(true);
                    downloadR2.setEnabled(true);
                    return;
                }
                
                String rootPath = MF.mySimulationsTextField().getText();

                String TBrootR = "./Tight-Binding_src/DOS";
                String TBrootL = rootPath + "/Tight-Binding/DOS";
                
                //**************

                int L = 3, M = 3;
                String LMParams = "3,3";
                try {
                    L = Integer.parseInt(LTextField2.getText());
                    M = Integer.parseInt(MTextField2.getText());
                    LMParams = L + "," + M;
                } catch (Exception e) {
                    MF.printDEB("L = 3, M = 3 (default taken!)");
                    LMParams = "3,3";
                }

                String fileNameR = TBrootR + "/results/DOS3_res-" + LMParams;
                String fileNameL = TBrootL + "/DOS3_res-" + LMParams;

                if (!Utils.exists(fileNameL)) {
                    // Réception (copie) du fichier d'output si celui-ci est distant
                    if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                        MF.getFile(fileNameR + " " + fileNameL);
                        if (Utils.osName().startsWith("Windows")) {
                            Utils.unix2dos(new File(fileNameL));
                        }
                    }
                } else {
                    MF.printOUT("File " + fileNameL + " exists in your local filetree!\n"
                            + "Please remove the local file before you download the new file version!");
                }

                String logfileNameR = TBrootR + "/DOS.log";
                String logfileNameL = TBrootL + "/DOS.log";

                // Réception (copie) du fichier d'output si celui-ci est distant
                if (MF.remoteGatewayRadioButton().isSelected() || MF.remoteAbinitRadioButton().isSelected()) {
                    MF.getFile(logfileNameR + " " + logfileNameL);
                    if (Utils.osName().startsWith("Windows")) {
                        Utils.unix2dos(new File(fileNameL));
                    }
                }

                // ****************************************************************************
                // Tester l'existance du fichier
                if (!Utils.exists(fileNameL)) {
                    MF.editFile(logfileNameL.replace("/./", "/"), false);
                } else {
                    MF.editFile(fileNameL.replace("/./", "/"), false);
                }
            }
        };

        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_downloadR2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LLabel;
    private javax.swing.JLabel LLabel2;
    private javax.swing.JTextField LTextField;
    private javax.swing.JTextField LTextField2;
    private javax.swing.JLabel MLabel;
    private javax.swing.JLabel MLabel2;
    private javax.swing.JTextField MTextField;
    private javax.swing.JTextField MTextField2;
    private javax.swing.JRadioButton RB_LM;
    private javax.swing.JRadioButton RB_notLM;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JCheckBox compileTBCheckBox;
    private javax.swing.JButton displayClustepInputFileButton3;
    private javax.swing.JButton downloadR1;
    private javax.swing.JButton downloadR2;
    private javax.swing.JButton downloadR3;
    private javax.swing.JButton geditClustepInputButton3;
    private javax.swing.JCheckBox jCheckBox_graphite;
    private javax.swing.JCheckBox jCheckBox_pentahept;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRB1;
    private javax.swing.JRadioButton jRB2;
    private javax.swing.JRadioButton jRB3;
    private javax.swing.JRadioButton jRB_dos1;
    private javax.swing.JRadioButton jRB_dos2;
    private javax.swing.JButton openClustepInputFileDialogButton3;
    private javax.swing.JLabel openClustepInputFileLabel4;
    private javax.swing.JTextField openTBbndstrInputFileTextField;
    private javax.swing.JButton sendSIMBNDSTRButton;
    private javax.swing.JButton sendSIMDosknee12Button;
    private javax.swing.JButton sendSIMDosknee3Button;
    private javax.swing.JCheckBox sendTBCheckBox;
    // End of variables declaration//GEN-END:variables
}
